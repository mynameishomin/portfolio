"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "TransformCore", {
    enumerable: true,
    get: function() {
        return TransformCore;
    }
});
var _base = require("./base");
var _scale = require("./scale");
var _transform = require("./transform");
var _translate = require("./translate");
function _assert_this_initialized(self) {
    if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
}
function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _get_prototype_of(o) {
    _get_prototype_of = Object.setPrototypeOf ? Object.getPrototypeOf : function getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _get_prototype_of(o);
}
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) _set_prototype_of(subClass, superClass);
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function _possible_constructor_return(self, call) {
    if (call && (_type_of(call) === "object" || typeof call === "function")) {
        return call;
    }
    return _assert_this_initialized(self);
}
function _set_prototype_of(o, p) {
    _set_prototype_of = Object.setPrototypeOf || function setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _set_prototype_of(o, p);
}
function _type_of(obj) {
    "@swc/helpers - typeof";
    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
}
function _is_native_reflect_construct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
        return true;
    } catch (e) {
        return false;
    }
}
function _create_super(Derived) {
    var hasNativeReflectConstruct = _is_native_reflect_construct();
    return function _createSuperInternal() {
        var Super = _get_prototype_of(Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _get_prototype_of(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else {
            result = Super.apply(this, arguments);
        }
        return _possible_constructor_return(this, result);
    };
}
var TransformCore = /*#__PURE__*/ function(Base) {
    "use strict";
    _inherits(TransformCore, Base);
    var _super = _create_super(TransformCore);
    function TransformCore() {
        _class_call_check(this, TransformCore);
        var _this;
        _this = _super.apply(this, arguments);
        _define_property(_assert_this_initialized(_this), "utilities", function() {
            var transformValue2d = _this.legacy ? _transform.Transform.normaliseLegacyFunctionValues({
                dimension: "2d"
            }) : _transform.Transform.normaliseFunctionValues({
                dimension: "2d"
            });
            var transformValue3d = _this.legacy ? _transform.Transform.normaliseLegacyFunctionValues() : _transform.Transform.normaliseFunctionValues();
            var transformDeclarations2d = {
                "--webkit-transform": transformValue2d,
                transform: transformValue2d
            };
            var transformDeclarations3d = {
                "--webkit-transform": transformValue3d,
                transform: transformValue3d
            };
            _this.api.addUtilities({
                // Leaving `.transform` utility here for backward compatibility,
                // not really sure what purpose it serves though
                ".transform": transformDeclarations2d,
                ".transform-cpu": _this.legacy ? transformDeclarations2d : _object_spread({
                    translate: _translate.Translate.normaliseFunctionValues({
                        dimension: "2d"
                    }),
                    scale: _scale.Scale.normaliseFunctionValues({
                        dimension: "2d"
                    })
                }, transformDeclarations2d),
                ".transform-gpu": _this.legacy ? transformDeclarations3d : _object_spread({
                    translate: _translate.Translate.normaliseFunctionValues(),
                    scale: _scale.Scale.normaliseFunctionValues()
                }, transformDeclarations3d),
                ".transform-none": _this.legacy ? {
                    "--webkit-transform": "none",
                    transform: "none"
                } : {
                    translate: "none",
                    scale: "none",
                    "--webkit-transform": "none",
                    transform: "none"
                }
            });
        });
        return _this;
    }
    return TransformCore;
}(_base.Base);
