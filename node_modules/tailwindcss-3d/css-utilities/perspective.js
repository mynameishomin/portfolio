"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "Perspective", {
    enumerable: true,
    get: function() {
        return Perspective;
    }
});
var _base = require("./base");
var _transform = require("./transform");
var _cssvalue = require("../utils/css-value");
var _dimension = require("../utils/dimension");
function _assert_this_initialized(self) {
    if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
}
function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _get_prototype_of(o) {
    _get_prototype_of = Object.setPrototypeOf ? Object.getPrototypeOf : function getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _get_prototype_of(o);
}
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) _set_prototype_of(subClass, superClass);
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function _possible_constructor_return(self, call) {
    if (call && (_type_of(call) === "object" || typeof call === "function")) {
        return call;
    }
    return _assert_this_initialized(self);
}
function _set_prototype_of(o, p) {
    _set_prototype_of = Object.setPrototypeOf || function setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _set_prototype_of(o, p);
}
function _type_of(obj) {
    "@swc/helpers - typeof";
    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
}
function _is_native_reflect_construct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
        return true;
    } catch (e) {
        return false;
    }
}
function _create_super(Derived) {
    var hasNativeReflectConstruct = _is_native_reflect_construct();
    return function _createSuperInternal() {
        var Super = _get_prototype_of(Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _get_prototype_of(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else {
            result = Super.apply(this, arguments);
        }
        return _possible_constructor_return(this, result);
    };
}
var Perspective = /*#__PURE__*/ function(Base) {
    "use strict";
    _inherits(Perspective, Base);
    var _super = _create_super(Perspective);
    function Perspective() {
        _class_call_check(this, Perspective);
        var _this;
        _this = _super.apply(this, arguments);
        _define_property(_assert_this_initialized(_this), "utilities", function() {
            var cssDeclarations = _this.legacy ? Perspective.legacyDeclarations() : Perspective.declarations();
            _this.api.matchUtilities({
                perspective: function(value) {
                    return _object_spread({
                        "@defaults transform": {},
                        "--tw-perspective": value
                    }, cssDeclarations);
                }
            }, {
                values: _this.api.theme("perspective"),
                supportsNegativeValues: true
            });
        });
        return _this;
    }
    return Perspective;
}(_base.Base);
_define_property(Perspective, "defaultTheme", {
    none: "none",
    250: "250px",
    500: "500px",
    750: "750px",
    1000: "1000px"
});
_define_property(Perspective, "defaultFunctionValues", {
    perspective: "var(--tw-perspective)"
});
_define_property(Perspective, "normaliseFunctionValues", function() {
    var _ref = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, dimension = _ref.dimension, perspective = _ref.perspective;
    if ((0, _dimension.normaliseDimension)(dimension) === "2d") {
        return "none";
    }
    return (0, _cssvalue.normaliseLengthValue)(perspective, Perspective.defaultFunctionValues.perspective);
});
_define_property(Perspective, "declarations", function() {
    var values = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    return {
        perspective: Perspective.normaliseFunctionValues(values)
    };
});
_define_property(Perspective, "legacyDeclarations", function() {
    return _transform.Transform.legacyDeclarations();
});
